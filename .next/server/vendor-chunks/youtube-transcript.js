"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/youtube-transcript";
exports.ids = ["vendor-chunks/youtube-transcript"];
exports.modules = {

/***/ "(rsc)/./node_modules/youtube-transcript/dist/youtube-transcript.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/youtube-transcript/dist/youtube-transcript.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   YoutubeTranscript: () => (/* binding */ YoutubeTranscript),\n/* harmony export */   YoutubeTranscriptDisabledError: () => (/* binding */ YoutubeTranscriptDisabledError),\n/* harmony export */   YoutubeTranscriptError: () => (/* binding */ YoutubeTranscriptError),\n/* harmony export */   YoutubeTranscriptNotAvailableError: () => (/* binding */ YoutubeTranscriptNotAvailableError),\n/* harmony export */   YoutubeTranscriptNotAvailableLanguageError: () => (/* binding */ YoutubeTranscriptNotAvailableLanguageError),\n/* harmony export */   YoutubeTranscriptTooManyRequestError: () => (/* binding */ YoutubeTranscriptTooManyRequestError),\n/* harmony export */   YoutubeTranscriptVideoUnavailableError: () => (/* binding */ YoutubeTranscriptVideoUnavailableError)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nconst RE_YOUTUBE = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/i;\r\nconst USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36,gzip(gfe)';\r\nconst RE_XML_TRANSCRIPT = /<text start=\"([^\"]*)\" dur=\"([^\"]*)\">([^<]*)<\\/text>/g;\r\nclass YoutubeTranscriptError extends Error {\r\n    constructor(message) {\r\n        super(`[YoutubeTranscript] ðŸš¨ ${message}`);\r\n    }\r\n}\r\nclass YoutubeTranscriptTooManyRequestError extends YoutubeTranscriptError {\r\n    constructor() {\r\n        super('YouTube is receiving too many requests from this IP and now requires solving a captcha to continue');\r\n    }\r\n}\r\nclass YoutubeTranscriptVideoUnavailableError extends YoutubeTranscriptError {\r\n    constructor(videoId) {\r\n        super(`The video is no longer available (${videoId})`);\r\n    }\r\n}\r\nclass YoutubeTranscriptDisabledError extends YoutubeTranscriptError {\r\n    constructor(videoId) {\r\n        super(`Transcript is disabled on this video (${videoId})`);\r\n    }\r\n}\r\nclass YoutubeTranscriptNotAvailableError extends YoutubeTranscriptError {\r\n    constructor(videoId) {\r\n        super(`No transcripts are available for this video (${videoId})`);\r\n    }\r\n}\r\nclass YoutubeTranscriptNotAvailableLanguageError extends YoutubeTranscriptError {\r\n    constructor(lang, availableLangs, videoId) {\r\n        super(`No transcripts are available in ${lang} this video (${videoId}). Available languages: ${availableLangs.join(', ')}`);\r\n    }\r\n}\r\n/**\r\n * Class to retrieve transcript if exist\r\n */\r\nclass YoutubeTranscript {\r\n    /**\r\n     * Fetch transcript from YTB Video\r\n     * @param videoId Video url or video identifier\r\n     * @param config Get transcript in a specific language ISO\r\n     */\r\n    static fetchTranscript(videoId, config) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const identifier = this.retrieveVideoId(videoId);\r\n            const videoPageResponse = yield fetch(`https://www.youtube.com/watch?v=${identifier}`, {\r\n                headers: Object.assign(Object.assign({}, ((config === null || config === void 0 ? void 0 : config.lang) && { 'Accept-Language': config.lang })), { 'User-Agent': USER_AGENT }),\r\n            });\r\n            const videoPageBody = yield videoPageResponse.text();\r\n            const splittedHTML = videoPageBody.split('\"captions\":');\r\n            if (splittedHTML.length <= 1) {\r\n                if (videoPageBody.includes('class=\"g-recaptcha\"')) {\r\n                    throw new YoutubeTranscriptTooManyRequestError();\r\n                }\r\n                if (!videoPageBody.includes('\"playabilityStatus\":')) {\r\n                    throw new YoutubeTranscriptVideoUnavailableError(videoId);\r\n                }\r\n                throw new YoutubeTranscriptDisabledError(videoId);\r\n            }\r\n            const captions = (_a = (() => {\r\n                try {\r\n                    return JSON.parse(splittedHTML[1].split(',\"videoDetails')[0].replace('\\n', ''));\r\n                }\r\n                catch (e) {\r\n                    return undefined;\r\n                }\r\n            })()) === null || _a === void 0 ? void 0 : _a['playerCaptionsTracklistRenderer'];\r\n            if (!captions) {\r\n                throw new YoutubeTranscriptDisabledError(videoId);\r\n            }\r\n            if (!('captionTracks' in captions)) {\r\n                throw new YoutubeTranscriptNotAvailableError(videoId);\r\n            }\r\n            if ((config === null || config === void 0 ? void 0 : config.lang) &&\r\n                !captions.captionTracks.some((track) => track.languageCode === (config === null || config === void 0 ? void 0 : config.lang))) {\r\n                throw new YoutubeTranscriptNotAvailableLanguageError(config === null || config === void 0 ? void 0 : config.lang, captions.captionTracks.map((track) => track.languageCode), videoId);\r\n            }\r\n            const transcriptURL = ((config === null || config === void 0 ? void 0 : config.lang) ? captions.captionTracks.find((track) => track.languageCode === (config === null || config === void 0 ? void 0 : config.lang))\r\n                : captions.captionTracks[0]).baseUrl;\r\n            const transcriptResponse = yield fetch(transcriptURL, {\r\n                headers: Object.assign(Object.assign({}, ((config === null || config === void 0 ? void 0 : config.lang) && { 'Accept-Language': config.lang })), { 'User-Agent': USER_AGENT }),\r\n            });\r\n            if (!transcriptResponse.ok) {\r\n                throw new YoutubeTranscriptNotAvailableError(videoId);\r\n            }\r\n            const transcriptBody = yield transcriptResponse.text();\r\n            const results = [...transcriptBody.matchAll(RE_XML_TRANSCRIPT)];\r\n            return results.map((result) => {\r\n                var _a;\r\n                return ({\r\n                    text: result[3],\r\n                    duration: parseFloat(result[2]),\r\n                    offset: parseFloat(result[1]),\r\n                    lang: (_a = config === null || config === void 0 ? void 0 : config.lang) !== null && _a !== void 0 ? _a : captions.captionTracks[0].languageCode,\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Retrieve video id from url or string\r\n     * @param videoId video url or video id\r\n     */\r\n    static retrieveVideoId(videoId) {\r\n        if (videoId.length === 11) {\r\n            return videoId;\r\n        }\r\n        const matchId = videoId.match(RE_YOUTUBE);\r\n        if (matchId && matchId.length) {\r\n            return matchId[1];\r\n        }\r\n        throw new YoutubeTranscriptError('Impossible to retrieve Youtube video ID.');\r\n    }\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/youtube-transcript/dist/youtube-transcript.esm.js\n");

/***/ })

};
;